scn RHudScanScript

;; Thresholds
float fPrimary  ; primary needs values
float fHealth   ; limb health
float fArmor    ; armor health
float fWeapon   ; weapon health
float fWeight   ; inventory weight

ref rWeapon
short sWeaponType
short sWeaponNeedsLoading

short iIndex
short iKey
ref rHUDEShowHealth
ref rPNxCVisionModeMain
ref rPNxCGrenadeHotkeyMain
short sPNstate
short sPNselectTrap
short sPNquickSelectTrap

ref rEquip
float fEquipState
array_var aHUDECheckList
array_var aWearable
short sHUDLastIndex
short sShowHUDE


Begin GameMode

  if GetGameLoaded || GetGameRestarted
    set iIndex to GetModIndex "HUD Extended.esp"
    if iIndex < 255
      set rHUDEShowHealth to BuildRef iIndex 8660 ; 0021D4
      ;; All armor and helmet values taken as-is from Imp's HUDEQuestScript
      let aHUDECheckList := ar_list 2, 0, 10, 11, 9, 14  ; armor, head, hat, eyeglasses, headband, mask
      let sHUDLastIndex := (ar_size aHUDECheckList) - 1
      if eval !(IsReference rHUDEShowHealth)
        set rHUDEShowHealth to 0
      endif
    else
      set rHUDEShowHealth to 0
    endif

    set iIndex to GetModIndex "Project Nevada - Core.esm"
    if iIndex < 255
      set rPNxCVisionModeMain to BuildRef iIndex 48006 ; 00BB86
      set rPNxCGrenadeHotkeyMain to BuildRef iIndex 18262 ; 004756
      if eval !(IsReference rPNxCVisionModeMain)
        set rPNxCVisionModeMain to 0
        set rPNxCGrenadeHotkeyMain to 0
      endif
    else
      set rPNxCVisionModeMain to 0
      set rPNxCGrenadeHotkeyMain to 0
    endif

    set fPrimary to RHudHTSThreshold * RHudHTSPercentage/100
    set fHealth  to RHudLimbPercentage
    set fArmor   to RHudArmorPercentage
    set fWeapon  to RHudWeaponPercentage
    set fWeight  to RHudWeightPercentage
  endif

  ;; Primary Needs Hud
  if (player.GetAV Dehydration >= fPrimary) || (player.GetAV Hunger >= fPrimary) || (player.GetAV SleepDeprevation >= fPrimary)
    set iHUD.pnhPrimaryOn to 1
    set iHUDFade.secondsToFadePNHPrimary to iHUDSettings.fadeSeconds
  endif

  ;; Rads
  if (player.GetAV RadiationRads >= fPrimary)
    set iHUD.pnhRadsOn to 1
    set iHUDFade.secondsToFadePNHRads to iHUDSettings.fadeSeconds
  endif

  ;; Inventory weight
  if ((player.GetAV InventoryWeight)/(player.GetAV CarryWeight)*100 >= fWeight)
    set iHUD.pnhEncumbOn to 1
    set iHUDFade.secondsToFadePNHEncumb to iHUDSettings.fadeSeconds
  endif

  ;; Weapon ammo and health
  set rWeapon to player.GetEquippedObject 5
  if rWeapon && (player.IsWeaponInList RepairBinoculars == 0) ; The Binoculars are One-handed Pistols(!), so weed them out
    set sWeaponType to player.GetWeaponType rWeapon
    ;; Check current clip load for weapons that have clips and weapon health for all weapons
    if ((sWeaponType >= 3 && sWeaponType <= 9) && (GetClipSize rWeapon > GetPlayerCurrentAmmoRounds)) || (player.GetWeaponHealthPerc <= fWeapon)
      set iHUD.hudCNDOn to 1
      set iHUDFade.secondsToFadeCND to iHUDSettings.fadeSeconds
    endif
  endif

  ;; Project Nevada's HUD - activates with vision mode usage or grenade selection
  if rPNxCVisionModeMain && rPNxCGrenadeHotkeyMain
    let sPNstate := rPNxCVisionModeMain.GetVariable "state"
    let sPNselectTrap := rPNxCGrenadeHotkeyMain.GetVariable "selectTrap"
    let sPNquickSelectTrap := rPNxCGrenadeHotkeyMain.GetVariable "quickselectTrap"
    if (sPNstate >= 10) || sPNselectTrap || sPNquickSelectTrap
      set iHUD.pnOn to 1
      set iHUDFade.secondsToFadePN to iHUDSettings.fadeSeconds
    endif
  endif

  ;; Hud Extended's Health and Armor Hud
  if rHUDEShowHealth
    set sShowHUDE to 0
    if (player.GetAV PerceptionCondition <= fHealth) || (player.GetAV LeftAttackCondition <= fHealth) || (player.GetAV EnduranceCondition <= fHealth) || (player.GetAV RightAttackCondition <= fHealth) || (player.GetAV LeftMobilityCondition <= fHealth) || (player.GetAV RightMobilityCondition <= fHealth)
      set sShowHUDE to 1
    else
      foreach aWearable <- aHUDECheckList
        let iIndex := aWearable["value"]
        set rEquip to player.GetEquippedCurrentHealth iIndex
        if rEquip
          set fEquipState to player.GetEquippedCurrentHealth iIndex
          set fEquipState to fEquipState / (gethealth rEquip) * 100
          let iKey := aWearable["key"]
          if ((fEquipState == -1) && (iKey == 0 || iKey == sHUDLastIndex)) || (fEquipState <= fArmor)
            ;; show if no armor or nothing on head => (fEquipState == -1) && key is first (armor) or last (all head wear)
            set sShowHUDE to 1
            break
          endif
        endif
      loop

      set rHUDEShowHealth to sShowHUDE
    endif
  endif

End
